# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from communication/ACK.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ACK(genpy.Message):
  _md5sum = "1572b006872bc5799fbee1b02a88be5b"
  _type = "communication/ACK"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UDPMessage.msg

uint16 messageid
uint16 uavid
time GPStime
bool judge
int32 parity"""
  __slots__ = ['messageid','uavid','GPStime','judge','parity']
  _slot_types = ['uint16','uint16','time','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       messageid,uavid,GPStime,judge,parity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ACK, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.messageid is None:
        self.messageid = 0
      if self.uavid is None:
        self.uavid = 0
      if self.GPStime is None:
        self.GPStime = genpy.Time()
      if self.judge is None:
        self.judge = False
      if self.parity is None:
        self.parity = 0
    else:
      self.messageid = 0
      self.uavid = 0
      self.GPStime = genpy.Time()
      self.judge = False
      self.parity = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H2IBi().pack(_x.messageid, _x.uavid, _x.GPStime.secs, _x.GPStime.nsecs, _x.judge, _x.parity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.GPStime is None:
        self.GPStime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.messageid, _x.uavid, _x.GPStime.secs, _x.GPStime.nsecs, _x.judge, _x.parity,) = _get_struct_2H2IBi().unpack(str[start:end])
      self.judge = bool(self.judge)
      self.GPStime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H2IBi().pack(_x.messageid, _x.uavid, _x.GPStime.secs, _x.GPStime.nsecs, _x.judge, _x.parity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.GPStime is None:
        self.GPStime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 17
      (_x.messageid, _x.uavid, _x.GPStime.secs, _x.GPStime.nsecs, _x.judge, _x.parity,) = _get_struct_2H2IBi().unpack(str[start:end])
      self.judge = bool(self.judge)
      self.GPStime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H2IBi = None
def _get_struct_2H2IBi():
    global _struct_2H2IBi
    if _struct_2H2IBi is None:
        _struct_2H2IBi = struct.Struct("<2H2IBi")
    return _struct_2H2IBi
