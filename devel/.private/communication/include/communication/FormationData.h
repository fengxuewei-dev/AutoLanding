// Generated by gencpp from file communication/FormationData.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_MESSAGE_FORMATIONDATA_H
#define COMMUNICATION_MESSAGE_FORMATIONDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication
{
template <class ContainerAllocator>
struct FormationData_
{
  typedef FormationData_<ContainerAllocator> Type;

  FormationData_()
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , homeLat(0.0)
    , homeLon(0.0)
    , homeAlt(0.0)
    , gps_time()
    , leaderHeading(0.0)
    , leaderCommand_yaw(0.0)
    , leaderAirspeed(0.0)  {
    }
  FormationData_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , position_z(0.0)
    , homeLat(0.0)
    , homeLon(0.0)
    , homeAlt(0.0)
    , gps_time()
    , leaderHeading(0.0)
    , leaderCommand_yaw(0.0)
    , leaderAirspeed(0.0)  {
  (void)_alloc;
    }



   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;

   typedef double _position_z_type;
  _position_z_type position_z;

   typedef double _homeLat_type;
  _homeLat_type homeLat;

   typedef double _homeLon_type;
  _homeLon_type homeLon;

   typedef double _homeAlt_type;
  _homeAlt_type homeAlt;

   typedef ros::Time _gps_time_type;
  _gps_time_type gps_time;

   typedef double _leaderHeading_type;
  _leaderHeading_type leaderHeading;

   typedef double _leaderCommand_yaw_type;
  _leaderCommand_yaw_type leaderCommand_yaw;

   typedef double _leaderAirspeed_type;
  _leaderAirspeed_type leaderAirspeed;





  typedef boost::shared_ptr< ::communication::FormationData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication::FormationData_<ContainerAllocator> const> ConstPtr;

}; // struct FormationData_

typedef ::communication::FormationData_<std::allocator<void> > FormationData;

typedef boost::shared_ptr< ::communication::FormationData > FormationDataPtr;
typedef boost::shared_ptr< ::communication::FormationData const> FormationDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication::FormationData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication::FormationData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communication::FormationData_<ContainerAllocator1> & lhs, const ::communication::FormationData_<ContainerAllocator2> & rhs)
{
  return lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.position_z == rhs.position_z &&
    lhs.homeLat == rhs.homeLat &&
    lhs.homeLon == rhs.homeLon &&
    lhs.homeAlt == rhs.homeAlt &&
    lhs.gps_time == rhs.gps_time &&
    lhs.leaderHeading == rhs.leaderHeading &&
    lhs.leaderCommand_yaw == rhs.leaderCommand_yaw &&
    lhs.leaderAirspeed == rhs.leaderAirspeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communication::FormationData_<ContainerAllocator1> & lhs, const ::communication::FormationData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::communication::FormationData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication::FormationData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::FormationData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::FormationData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::FormationData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::FormationData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication::FormationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca7ccece133aa268e8465b3c1b1aa88d";
  }

  static const char* value(const ::communication::FormationData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca7ccece133aa268ULL;
  static const uint64_t static_value2 = 0xe8465b3c1b1aa88dULL;
};

template<class ContainerAllocator>
struct DataType< ::communication::FormationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication/FormationData";
  }

  static const char* value(const ::communication::FormationData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication::FormationData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# FormationData.msg\n"
"\n"
"float64 position_x\n"
"float64 position_y\n"
"float64 position_z\n"
"\n"
"float64 homeLat\n"
"float64 homeLon\n"
"float64 homeAlt\n"
"time gps_time\n"
"\n"
"float64 leaderHeading\n"
"float64 leaderCommand_yaw\n"
"float64 leaderAirspeed\n"
;
  }

  static const char* value(const ::communication::FormationData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication::FormationData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.homeLat);
      stream.next(m.homeLon);
      stream.next(m.homeAlt);
      stream.next(m.gps_time);
      stream.next(m.leaderHeading);
      stream.next(m.leaderCommand_yaw);
      stream.next(m.leaderAirspeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FormationData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication::FormationData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication::FormationData_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
    s << indent << "position_z: ";
    Printer<double>::stream(s, indent + "  ", v.position_z);
    s << indent << "homeLat: ";
    Printer<double>::stream(s, indent + "  ", v.homeLat);
    s << indent << "homeLon: ";
    Printer<double>::stream(s, indent + "  ", v.homeLon);
    s << indent << "homeAlt: ";
    Printer<double>::stream(s, indent + "  ", v.homeAlt);
    s << indent << "gps_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.gps_time);
    s << indent << "leaderHeading: ";
    Printer<double>::stream(s, indent + "  ", v.leaderHeading);
    s << indent << "leaderCommand_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.leaderCommand_yaw);
    s << indent << "leaderAirspeed: ";
    Printer<double>::stream(s, indent + "  ", v.leaderAirspeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_MESSAGE_FORMATIONDATA_H
