// Generated by gencpp from file communication/FormationPositionContoller.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_MESSAGE_FORMATIONPOSITIONCONTOLLER_H
#define COMMUNICATION_MESSAGE_FORMATIONPOSITIONCONTOLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication
{
template <class ContainerAllocator>
struct FormationPositionContoller_
{
  typedef FormationPositionContoller_<ContainerAllocator> Type;

  FormationPositionContoller_()
    : count_number(0.0)
    , leaderHeading(0.0)
    , leaderCommand_yaw(0.0)
    , leaderAirspeed(0.0)  {
    }
  FormationPositionContoller_(const ContainerAllocator& _alloc)
    : count_number(0.0)
    , leaderHeading(0.0)
    , leaderCommand_yaw(0.0)
    , leaderAirspeed(0.0)  {
  (void)_alloc;
    }



   typedef double _count_number_type;
  _count_number_type count_number;

   typedef double _leaderHeading_type;
  _leaderHeading_type leaderHeading;

   typedef double _leaderCommand_yaw_type;
  _leaderCommand_yaw_type leaderCommand_yaw;

   typedef double _leaderAirspeed_type;
  _leaderAirspeed_type leaderAirspeed;





  typedef boost::shared_ptr< ::communication::FormationPositionContoller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication::FormationPositionContoller_<ContainerAllocator> const> ConstPtr;

}; // struct FormationPositionContoller_

typedef ::communication::FormationPositionContoller_<std::allocator<void> > FormationPositionContoller;

typedef boost::shared_ptr< ::communication::FormationPositionContoller > FormationPositionContollerPtr;
typedef boost::shared_ptr< ::communication::FormationPositionContoller const> FormationPositionContollerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication::FormationPositionContoller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication::FormationPositionContoller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communication::FormationPositionContoller_<ContainerAllocator1> & lhs, const ::communication::FormationPositionContoller_<ContainerAllocator2> & rhs)
{
  return lhs.count_number == rhs.count_number &&
    lhs.leaderHeading == rhs.leaderHeading &&
    lhs.leaderCommand_yaw == rhs.leaderCommand_yaw &&
    lhs.leaderAirspeed == rhs.leaderAirspeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communication::FormationPositionContoller_<ContainerAllocator1> & lhs, const ::communication::FormationPositionContoller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::communication::FormationPositionContoller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication::FormationPositionContoller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::FormationPositionContoller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::FormationPositionContoller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::FormationPositionContoller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::FormationPositionContoller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication::FormationPositionContoller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d87d2620f7eee8afb717e021cba9a3f4";
  }

  static const char* value(const ::communication::FormationPositionContoller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd87d2620f7eee8afULL;
  static const uint64_t static_value2 = 0xb717e021cba9a3f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::communication::FormationPositionContoller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication/FormationPositionContoller";
  }

  static const char* value(const ::communication::FormationPositionContoller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication::FormationPositionContoller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# FormationPositionContoller.msg\n"
"\n"
"float64 count_number\n"
"float64 leaderHeading\n"
"float64 leaderCommand_yaw\n"
"float64 leaderAirspeed\n"
;
  }

  static const char* value(const ::communication::FormationPositionContoller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication::FormationPositionContoller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.count_number);
      stream.next(m.leaderHeading);
      stream.next(m.leaderCommand_yaw);
      stream.next(m.leaderAirspeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FormationPositionContoller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication::FormationPositionContoller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication::FormationPositionContoller_<ContainerAllocator>& v)
  {
    s << indent << "count_number: ";
    Printer<double>::stream(s, indent + "  ", v.count_number);
    s << indent << "leaderHeading: ";
    Printer<double>::stream(s, indent + "  ", v.leaderHeading);
    s << indent << "leaderCommand_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.leaderCommand_yaw);
    s << indent << "leaderAirspeed: ";
    Printer<double>::stream(s, indent + "  ", v.leaderAirspeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_MESSAGE_FORMATIONPOSITIONCONTOLLER_H
