// Generated by gencpp from file communication/udpDataTypes.msg
// DO NOT EDIT!


#ifndef COMMUNICATION_MESSAGE_UDPDATATYPES_H
#define COMMUNICATION_MESSAGE_UDPDATATYPES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace communication
{
template <class ContainerAllocator>
struct udpDataTypes_
{
  typedef udpDataTypes_<ContainerAllocator> Type;

  udpDataTypes_()
    : startUDP_Data(0)
    , startUPD_HOME(0)
    , startACK(0)  {
    }
  udpDataTypes_(const ContainerAllocator& _alloc)
    : startUDP_Data(0)
    , startUPD_HOME(0)
    , startACK(0)  {
  (void)_alloc;
    }



   typedef int8_t _startUDP_Data_type;
  _startUDP_Data_type startUDP_Data;

   typedef int8_t _startUPD_HOME_type;
  _startUPD_HOME_type startUPD_HOME;

   typedef int8_t _startACK_type;
  _startACK_type startACK;





  typedef boost::shared_ptr< ::communication::udpDataTypes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::communication::udpDataTypes_<ContainerAllocator> const> ConstPtr;

}; // struct udpDataTypes_

typedef ::communication::udpDataTypes_<std::allocator<void> > udpDataTypes;

typedef boost::shared_ptr< ::communication::udpDataTypes > udpDataTypesPtr;
typedef boost::shared_ptr< ::communication::udpDataTypes const> udpDataTypesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::communication::udpDataTypes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::communication::udpDataTypes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::communication::udpDataTypes_<ContainerAllocator1> & lhs, const ::communication::udpDataTypes_<ContainerAllocator2> & rhs)
{
  return lhs.startUDP_Data == rhs.startUDP_Data &&
    lhs.startUPD_HOME == rhs.startUPD_HOME &&
    lhs.startACK == rhs.startACK;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::communication::udpDataTypes_<ContainerAllocator1> & lhs, const ::communication::udpDataTypes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::communication::udpDataTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::communication::udpDataTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::udpDataTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::communication::udpDataTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::udpDataTypes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::communication::udpDataTypes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::communication::udpDataTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24c91d25d88a35c807139468a346102b";
  }

  static const char* value(const ::communication::udpDataTypes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24c91d25d88a35c8ULL;
  static const uint64_t static_value2 = 0x07139468a346102bULL;
};

template<class ContainerAllocator>
struct DataType< ::communication::udpDataTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "communication/udpDataTypes";
  }

  static const char* value(const ::communication::udpDataTypes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::communication::udpDataTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# udpDataTypes.msg\n"
"\n"
"int8 startUDP_Data\n"
"int8 startUPD_HOME\n"
"int8 startACK\n"
"\n"
"# taskType_sub = nh.advertise<communication::udpDataTypes>\n"
"#           (\"communication/taskTypes/udpDataTypes\", 1);\n"
"\n"
"# taskType_sub = nh.subscribe<communication::QgcCommands>\n"
"#           (uavName + \"/communication/QgcCommands\" + s_i,1, handler_taskType);\n"
"# \n"
;
  }

  static const char* value(const ::communication::udpDataTypes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::communication::udpDataTypes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startUDP_Data);
      stream.next(m.startUPD_HOME);
      stream.next(m.startACK);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct udpDataTypes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::communication::udpDataTypes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::communication::udpDataTypes_<ContainerAllocator>& v)
  {
    s << indent << "startUDP_Data: ";
    Printer<int8_t>::stream(s, indent + "  ", v.startUDP_Data);
    s << indent << "startUPD_HOME: ";
    Printer<int8_t>::stream(s, indent + "  ", v.startUPD_HOME);
    s << indent << "startACK: ";
    Printer<int8_t>::stream(s, indent + "  ", v.startACK);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMUNICATION_MESSAGE_UDPDATATYPES_H
