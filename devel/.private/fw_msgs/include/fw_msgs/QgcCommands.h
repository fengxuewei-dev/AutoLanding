// Generated by gencpp from file fw_msgs/QgcCommands.msg
// DO NOT EDIT!


#ifndef FW_MSGS_MESSAGE_QGCCOMMANDS_H
#define FW_MSGS_MESSAGE_QGCCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fw_msgs
{
template <class ContainerAllocator>
struct QgcCommands_
{
  typedef QgcCommands_<ContainerAllocator> Type;

  QgcCommands_()
    : messageid(0)
    , gsid(0)
    , uavid(0)
    , uavnumber(0)
    , tasktype(0)
    , plane_state(0)
    , plane_group(0)
    , gapx(0)
    , gapy(0)
    , GPStime(0.0)
    , parity(0)  {
    }
  QgcCommands_(const ContainerAllocator& _alloc)
    : messageid(0)
    , gsid(0)
    , uavid(0)
    , uavnumber(0)
    , tasktype(0)
    , plane_state(0)
    , plane_group(0)
    , gapx(0)
    , gapy(0)
    , GPStime(0.0)
    , parity(0)  {
  (void)_alloc;
    }



   typedef uint16_t _messageid_type;
  _messageid_type messageid;

   typedef uint16_t _gsid_type;
  _gsid_type gsid;

   typedef uint16_t _uavid_type;
  _uavid_type uavid;

   typedef uint16_t _uavnumber_type;
  _uavnumber_type uavnumber;

   typedef int32_t _tasktype_type;
  _tasktype_type tasktype;

   typedef int16_t _plane_state_type;
  _plane_state_type plane_state;

   typedef int16_t _plane_group_type;
  _plane_group_type plane_group;

   typedef int16_t _gapx_type;
  _gapx_type gapx;

   typedef int16_t _gapy_type;
  _gapy_type gapy;

   typedef double _GPStime_type;
  _GPStime_type GPStime;

   typedef int32_t _parity_type;
  _parity_type parity;





  typedef boost::shared_ptr< ::fw_msgs::QgcCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fw_msgs::QgcCommands_<ContainerAllocator> const> ConstPtr;

}; // struct QgcCommands_

typedef ::fw_msgs::QgcCommands_<std::allocator<void> > QgcCommands;

typedef boost::shared_ptr< ::fw_msgs::QgcCommands > QgcCommandsPtr;
typedef boost::shared_ptr< ::fw_msgs::QgcCommands const> QgcCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fw_msgs::QgcCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fw_msgs::QgcCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fw_msgs::QgcCommands_<ContainerAllocator1> & lhs, const ::fw_msgs::QgcCommands_<ContainerAllocator2> & rhs)
{
  return lhs.messageid == rhs.messageid &&
    lhs.gsid == rhs.gsid &&
    lhs.uavid == rhs.uavid &&
    lhs.uavnumber == rhs.uavnumber &&
    lhs.tasktype == rhs.tasktype &&
    lhs.plane_state == rhs.plane_state &&
    lhs.plane_group == rhs.plane_group &&
    lhs.gapx == rhs.gapx &&
    lhs.gapy == rhs.gapy &&
    lhs.GPStime == rhs.GPStime &&
    lhs.parity == rhs.parity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fw_msgs::QgcCommands_<ContainerAllocator1> & lhs, const ::fw_msgs::QgcCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::QgcCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::QgcCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::QgcCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::QgcCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::QgcCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::QgcCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fw_msgs::QgcCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e2eb4b83ad275dc0706fdd57e60ccec";
  }

  static const char* value(const ::fw_msgs::QgcCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e2eb4b83ad275dcULL;
  static const uint64_t static_value2 = 0x0706fdd57e60ccecULL;
};

template<class ContainerAllocator>
struct DataType< ::fw_msgs::QgcCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fw_msgs/QgcCommands";
  }

  static const char* value(const ::fw_msgs::QgcCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fw_msgs::QgcCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# UDPMessage.msg\n"
"\n"
"uint16 messageid\n"
"uint16 gsid\n"
"uint16 uavid\n"
"uint16 uavnumber\n"
"int32 tasktype\n"
"int16 plane_state\n"
"int16 plane_group\n"
"int16 gapx\n"
"int16 gapy\n"
"float64 GPStime\n"
"int32 parity\n"
;
  }

  static const char* value(const ::fw_msgs::QgcCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fw_msgs::QgcCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.messageid);
      stream.next(m.gsid);
      stream.next(m.uavid);
      stream.next(m.uavnumber);
      stream.next(m.tasktype);
      stream.next(m.plane_state);
      stream.next(m.plane_group);
      stream.next(m.gapx);
      stream.next(m.gapy);
      stream.next(m.GPStime);
      stream.next(m.parity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QgcCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fw_msgs::QgcCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fw_msgs::QgcCommands_<ContainerAllocator>& v)
  {
    s << indent << "messageid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.messageid);
    s << indent << "gsid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gsid);
    s << indent << "uavid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uavid);
    s << indent << "uavnumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uavnumber);
    s << indent << "tasktype: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tasktype);
    s << indent << "plane_state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.plane_state);
    s << indent << "plane_group: ";
    Printer<int16_t>::stream(s, indent + "  ", v.plane_group);
    s << indent << "gapx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gapx);
    s << indent << "gapy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gapy);
    s << indent << "GPStime: ";
    Printer<double>::stream(s, indent + "  ", v.GPStime);
    s << indent << "parity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FW_MSGS_MESSAGE_QGCCOMMANDS_H
