// Generated by gencpp from file fw_msgs/ProtectFlag.msg
// DO NOT EDIT!


#ifndef FW_MSGS_MESSAGE_PROTECTFLAG_H
#define FW_MSGS_MESSAGE_PROTECTFLAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fw_msgs
{
template <class ContainerAllocator>
struct ProtectFlag_
{
  typedef ProtectFlag_<ContainerAllocator> Type;

  ProtectFlag_()
    : PROTECT_EXIT_FLAG(0)  {
    }
  ProtectFlag_(const ContainerAllocator& _alloc)
    : PROTECT_EXIT_FLAG(0)  {
  (void)_alloc;
    }



   typedef int32_t _PROTECT_EXIT_FLAG_type;
  _PROTECT_EXIT_FLAG_type PROTECT_EXIT_FLAG;





  typedef boost::shared_ptr< ::fw_msgs::ProtectFlag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fw_msgs::ProtectFlag_<ContainerAllocator> const> ConstPtr;

}; // struct ProtectFlag_

typedef ::fw_msgs::ProtectFlag_<std::allocator<void> > ProtectFlag;

typedef boost::shared_ptr< ::fw_msgs::ProtectFlag > ProtectFlagPtr;
typedef boost::shared_ptr< ::fw_msgs::ProtectFlag const> ProtectFlagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fw_msgs::ProtectFlag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fw_msgs::ProtectFlag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fw_msgs::ProtectFlag_<ContainerAllocator1> & lhs, const ::fw_msgs::ProtectFlag_<ContainerAllocator2> & rhs)
{
  return lhs.PROTECT_EXIT_FLAG == rhs.PROTECT_EXIT_FLAG;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fw_msgs::ProtectFlag_<ContainerAllocator1> & lhs, const ::fw_msgs::ProtectFlag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::ProtectFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::ProtectFlag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::ProtectFlag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cbdec5b7556f1bc61b85f03babb7b6d";
  }

  static const char* value(const ::fw_msgs::ProtectFlag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cbdec5b7556f1bcULL;
  static const uint64_t static_value2 = 0x61b85f03babb7b6dULL;
};

template<class ContainerAllocator>
struct DataType< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fw_msgs/ProtectFlag";
  }

  static const char* value(const ::fw_msgs::ProtectFlag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ProtectFlag.msg\n"
"\n"
"int32 PROTECT_EXIT_FLAG\n"
"\n"
"# \"communication/protectExitFlag/protecEexitFlag\"\n"
;
  }

  static const char* value(const ::fw_msgs::ProtectFlag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PROTECT_EXIT_FLAG);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProtectFlag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fw_msgs::ProtectFlag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fw_msgs::ProtectFlag_<ContainerAllocator>& v)
  {
    s << indent << "PROTECT_EXIT_FLAG: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PROTECT_EXIT_FLAG);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FW_MSGS_MESSAGE_PROTECTFLAG_H
