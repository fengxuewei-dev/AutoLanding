// Generated by gencpp from file fw_msgs/NormalSwitchMode.msg
// DO NOT EDIT!


#ifndef FW_MSGS_MESSAGE_NORMALSWITCHMODE_H
#define FW_MSGS_MESSAGE_NORMALSWITCHMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fw_msgs
{
template <class ContainerAllocator>
struct NormalSwitchMode_
{
  typedef NormalSwitchMode_<ContainerAllocator> Type;

  NormalSwitchMode_()
    : Normal_Switch_Mode_Flag(0)  {
    }
  NormalSwitchMode_(const ContainerAllocator& _alloc)
    : Normal_Switch_Mode_Flag(0)  {
  (void)_alloc;
    }



   typedef int32_t _Normal_Switch_Mode_Flag_type;
  _Normal_Switch_Mode_Flag_type Normal_Switch_Mode_Flag;





  typedef boost::shared_ptr< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> const> ConstPtr;

}; // struct NormalSwitchMode_

typedef ::fw_msgs::NormalSwitchMode_<std::allocator<void> > NormalSwitchMode;

typedef boost::shared_ptr< ::fw_msgs::NormalSwitchMode > NormalSwitchModePtr;
typedef boost::shared_ptr< ::fw_msgs::NormalSwitchMode const> NormalSwitchModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fw_msgs::NormalSwitchMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fw_msgs::NormalSwitchMode_<ContainerAllocator1> & lhs, const ::fw_msgs::NormalSwitchMode_<ContainerAllocator2> & rhs)
{
  return lhs.Normal_Switch_Mode_Flag == rhs.Normal_Switch_Mode_Flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fw_msgs::NormalSwitchMode_<ContainerAllocator1> & lhs, const ::fw_msgs::NormalSwitchMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9e01fe0fa34836a4cd37fddd4a5467f";
  }

  static const char* value(const ::fw_msgs::NormalSwitchMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9e01fe0fa34836aULL;
  static const uint64_t static_value2 = 0x4cd37fddd4a5467fULL;
};

template<class ContainerAllocator>
struct DataType< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fw_msgs/NormalSwitchMode";
  }

  static const char* value(const ::fw_msgs::NormalSwitchMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# NormalSwitchMode.msg\n"
"\n"
"int32 Normal_Switch_Mode_Flag\n"
"\n"
"# \"communication/protectExitFlag/normalSwitchModeFlag\"\n"
;
  }

  static const char* value(const ::fw_msgs::NormalSwitchMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Normal_Switch_Mode_Flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NormalSwitchMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fw_msgs::NormalSwitchMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fw_msgs::NormalSwitchMode_<ContainerAllocator>& v)
  {
    s << indent << "Normal_Switch_Mode_Flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Normal_Switch_Mode_Flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FW_MSGS_MESSAGE_NORMALSWITCHMODE_H
