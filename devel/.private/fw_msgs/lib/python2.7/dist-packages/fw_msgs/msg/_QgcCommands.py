# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fw_msgs/QgcCommands.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class QgcCommands(genpy.Message):
  _md5sum = "0e2eb4b83ad275dc0706fdd57e60ccec"
  _type = "fw_msgs/QgcCommands"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UDPMessage.msg

uint16 messageid
uint16 gsid
uint16 uavid
uint16 uavnumber
int32 tasktype
int16 plane_state
int16 plane_group
int16 gapx
int16 gapy
float64 GPStime
int32 parity
"""
  __slots__ = ['messageid','gsid','uavid','uavnumber','tasktype','plane_state','plane_group','gapx','gapy','GPStime','parity']
  _slot_types = ['uint16','uint16','uint16','uint16','int32','int16','int16','int16','int16','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       messageid,gsid,uavid,uavnumber,tasktype,plane_state,plane_group,gapx,gapy,GPStime,parity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QgcCommands, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.messageid is None:
        self.messageid = 0
      if self.gsid is None:
        self.gsid = 0
      if self.uavid is None:
        self.uavid = 0
      if self.uavnumber is None:
        self.uavnumber = 0
      if self.tasktype is None:
        self.tasktype = 0
      if self.plane_state is None:
        self.plane_state = 0
      if self.plane_group is None:
        self.plane_group = 0
      if self.gapx is None:
        self.gapx = 0
      if self.gapy is None:
        self.gapy = 0
      if self.GPStime is None:
        self.GPStime = 0.
      if self.parity is None:
        self.parity = 0
    else:
      self.messageid = 0
      self.gsid = 0
      self.uavid = 0
      self.uavnumber = 0
      self.tasktype = 0
      self.plane_state = 0
      self.plane_group = 0
      self.gapx = 0
      self.gapy = 0
      self.GPStime = 0.
      self.parity = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4Hi4hdi().pack(_x.messageid, _x.gsid, _x.uavid, _x.uavnumber, _x.tasktype, _x.plane_state, _x.plane_group, _x.gapx, _x.gapy, _x.GPStime, _x.parity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.messageid, _x.gsid, _x.uavid, _x.uavnumber, _x.tasktype, _x.plane_state, _x.plane_group, _x.gapx, _x.gapy, _x.GPStime, _x.parity,) = _get_struct_4Hi4hdi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4Hi4hdi().pack(_x.messageid, _x.gsid, _x.uavid, _x.uavnumber, _x.tasktype, _x.plane_state, _x.plane_group, _x.gapx, _x.gapy, _x.GPStime, _x.parity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.messageid, _x.gsid, _x.uavid, _x.uavnumber, _x.tasktype, _x.plane_state, _x.plane_group, _x.gapx, _x.gapy, _x.GPStime, _x.parity,) = _get_struct_4Hi4hdi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4Hi4hdi = None
def _get_struct_4Hi4hdi():
    global _struct_4Hi4hdi
    if _struct_4Hi4hdi is None:
        _struct_4Hi4hdi = struct.Struct("<4Hi4hdi")
    return _struct_4Hi4hdi
