// Generated by gencpp from file processer/uavflag.msg
// DO NOT EDIT!


#ifndef PROCESSER_MESSAGE_UAVFLAG_H
#define PROCESSER_MESSAGE_UAVFLAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace processer
{
template <class ContainerAllocator>
struct uavflag_
{
  typedef uavflag_<ContainerAllocator> Type;

  uavflag_()
    : group(0.0)
    , isleader(0.0)
    , leaderid(0.0)
    , myid(0.0)
    , gapx(0.0)
    , gapy(0.0)  {
    }
  uavflag_(const ContainerAllocator& _alloc)
    : group(0.0)
    , isleader(0.0)
    , leaderid(0.0)
    , myid(0.0)
    , gapx(0.0)
    , gapy(0.0)  {
  (void)_alloc;
    }



   typedef float _group_type;
  _group_type group;

   typedef float _isleader_type;
  _isleader_type isleader;

   typedef float _leaderid_type;
  _leaderid_type leaderid;

   typedef float _myid_type;
  _myid_type myid;

   typedef float _gapx_type;
  _gapx_type gapx;

   typedef float _gapy_type;
  _gapy_type gapy;





  typedef boost::shared_ptr< ::processer::uavflag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::processer::uavflag_<ContainerAllocator> const> ConstPtr;

}; // struct uavflag_

typedef ::processer::uavflag_<std::allocator<void> > uavflag;

typedef boost::shared_ptr< ::processer::uavflag > uavflagPtr;
typedef boost::shared_ptr< ::processer::uavflag const> uavflagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::processer::uavflag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::processer::uavflag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::processer::uavflag_<ContainerAllocator1> & lhs, const ::processer::uavflag_<ContainerAllocator2> & rhs)
{
  return lhs.group == rhs.group &&
    lhs.isleader == rhs.isleader &&
    lhs.leaderid == rhs.leaderid &&
    lhs.myid == rhs.myid &&
    lhs.gapx == rhs.gapx &&
    lhs.gapy == rhs.gapy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::processer::uavflag_<ContainerAllocator1> & lhs, const ::processer::uavflag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace processer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::processer::uavflag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::processer::uavflag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::processer::uavflag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::processer::uavflag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::processer::uavflag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::processer::uavflag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::processer::uavflag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d0019540b3060372b57877eb8d6b603";
  }

  static const char* value(const ::processer::uavflag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d0019540b306037ULL;
  static const uint64_t static_value2 = 0x2b57877eb8d6b603ULL;
};

template<class ContainerAllocator>
struct DataType< ::processer::uavflag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "processer/uavflag";
  }

  static const char* value(const ::processer::uavflag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::processer::uavflag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# uavflag.msg\n"
"\n"
"float32 group\n"
"float32 isleader\n"
"float32 leaderid\n"
"float32 myid\n"
"float32 gapx\n"
"float32 gapy\n"
"\n"
"# qgccommand 当前状态\n"
;
  }

  static const char* value(const ::processer::uavflag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::processer::uavflag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group);
      stream.next(m.isleader);
      stream.next(m.leaderid);
      stream.next(m.myid);
      stream.next(m.gapx);
      stream.next(m.gapy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uavflag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::processer::uavflag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::processer::uavflag_<ContainerAllocator>& v)
  {
    s << indent << "group: ";
    Printer<float>::stream(s, indent + "  ", v.group);
    s << indent << "isleader: ";
    Printer<float>::stream(s, indent + "  ", v.isleader);
    s << indent << "leaderid: ";
    Printer<float>::stream(s, indent + "  ", v.leaderid);
    s << indent << "myid: ";
    Printer<float>::stream(s, indent + "  ", v.myid);
    s << indent << "gapx: ";
    Printer<float>::stream(s, indent + "  ", v.gapx);
    s << indent << "gapy: ";
    Printer<float>::stream(s, indent + "  ", v.gapy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCESSER_MESSAGE_UAVFLAG_H
